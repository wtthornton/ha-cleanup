{
  "id": null,
  "title": "Production Entity Relationship Dashboard",
  "tags": [
    "entity-relationships",
    "logical-grouping",
    "home-assistant",
    "ha-ingestor",
    "production",
    "prod"
  ],
  "style": "dark",
  "timezone": "browser",
  "refresh": "60s",
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "panels": [
    {
      "id": 1,
      "title": "Entity Domain Relationships",
      "type": "heatmap",
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -6h)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> aggregateWindow(every: 1h, fn: count, createEmpty: false)\n  |> group(columns: [\"domain\", \"entity_id\"])\n  |> yield(name: \"{{domain}}/{{entity_id}}\")",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "continuous-GrYlRd"}
        }
      }
    },
    {
      "id": 2,
      "title": "Entity Activity Correlation",
      "type": "timeseries",
      "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -6h)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> aggregateWindow(every: 15m, fn: count, createEmpty: false)\n  |> group(columns: [\"entity_id\"])\n  |> yield(name: \"{{entity_id}}\")",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "palette-classic"},
          "custom": {
            "drawStyle": "line",
            "lineInterpolation": "smooth",
            "fillOpacity": 20
          }
        }
      }
    },
    {
      "id": 3,
      "title": "Device Family Grouping",
      "type": "table",
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -6h)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> filter(fn: (r) => r[\"_field\"] == \"attr_friendly_name\")\n  |> group(columns: [\"entity_id\", \"domain\", \"_value\"])\n  |> count()\n  |> sort(columns: [\"_value\"], desc: true)\n  |> limit(n: 30)",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "thresholds": {
            "steps": [
              {"color": "green", "value": null},
              {"color": "yellow", "value": 10},
              {"color": "red", "value": 50}
            ]
          }
        }
      }
    },
    {
      "id": 4,
      "title": "Room/Area Grouping",
      "type": "piechart",
      "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -6h)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> filter(fn: (r) => r[\"_field\"] == \"attr_friendly_name\")\n  |> filter(fn: (r) => r[\"_value\"] =~ /.*room.*|.*bedroom.*|.*kitchen.*|.*living.*|.*bathroom.*/i)\n  |> group(columns: [\"_value\"])\n  |> count()\n  |> yield(name: \"{{_value}}\")",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "palette-classic"}
        }
      }
    },
    {
      "id": 5,
      "title": "Entity State Transitions",
      "type": "table",
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 16},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -6h)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> filter(fn: (r) => r[\"_field\"] == \"state\")\n  |> group(columns: [\"entity_id\", \"domain\", \"state\"])\n  |> count()\n  |> sort(columns: [\"_value\"], desc: true)\n  |> limit(n: 50)",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "thresholds": {
            "steps": [
              {"color": "green", "value": null},
              {"color": "yellow", "value": 5},
              {"color": "red", "value": 20}
            ]
          }
        }
      }
    },
    {
      "id": 6,
      "title": "Sensor Type Classification",
      "type": "stat",
      "gridPos": {"h": 8, "w": 6, "x": 0, "y": 24},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -6h)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"_field\"] == \"attr_device_class\")\n  |> group(columns: [\"_value\"])\n  |> distinct(column: \"_value\")\n  |> count()\n  |> yield(name: \"Sensor Types\")",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "palette-classic"},
          "unit": "short"
        }
      }
    },
    {
      "id": 7,
      "title": "Entity Communication Patterns",
      "type": "timeseries",
      "gridPos": {"h": 8, "w": 18, "x": 6, "y": 24},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -6h)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> aggregateWindow(every: 30m, fn: count, createEmpty: false)\n  |> group(columns: [\"source\"])\n  |> yield(name: \"{{source}}\")",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "palette-classic"},
          "custom": {
            "drawStyle": "line",
            "lineInterpolation": "smooth",
            "fillOpacity": 20
          }
        }
      }
    }
  ]
}
