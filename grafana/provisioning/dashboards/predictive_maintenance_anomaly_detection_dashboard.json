{
  "id": null,
  "title": "Production Predictive Maintenance & Anomaly Detection Dashboard",
  "tags": ["predictive-maintenance", "anomaly-detection", "failure-prediction", "home-assistant", "ha-ingestor", "production", "prod"],
  "style": "dark",
  "timezone": "browser",
  "refresh": "60s",
  "time": {"from": "now-7d", "to": "now"},
  "panels": [
    {
      "id": 1,
      "title": "Anomaly Detection Score",
      "type": "gauge",
      "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\") |> range(start: -24h) |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/) |> filter(fn: (r) => r[\"domain\"] == \"sensor\") |> filter(fn: (r) => r[\"_field\"] == \"state\") |> filter(fn: (r) => r[\"state\"] =~ /^[0-9.]+$/) |> map(fn: (r) => ({r with _value: float(v: r.state)})) |> aggregateWindow(every: 1h, fn: stddev, createEmpty: false) |> mean() |> map(fn: (r) => ({r with _value: (r._value / 100.0) * 100})) |> yield(name: \"Anomaly Score\")",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "thresholds": {
            "steps": [
              {"color": "green", "value": 0},
              {"color": "yellow", "value": 30},
              {"color": "red", "value": 70}
            ]
          },
          "unit": "percent",
          "min": 0,
          "max": 100,
          "displayName": "Anomaly Score"
        }
      }
    },
    {
      "id": 2,
      "title": "Sensor Value Anomalies",
      "type": "timeseries",
      "gridPos": {"h": 8, "w": 18, "x": 6, "y": 0},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\") |> range(start: -7d) |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/) |> filter(fn: (r) => r[\"domain\"] == \"sensor\") |> filter(fn: (r) => r[\"_field\"] == \"state\") |> filter(fn: (r) => r[\"state\"] =~ /^[0-9.]+$/) |> map(fn: (r) => ({r with _value: float(v: r.state)})) |> aggregateWindow(every: 1h, fn: mean, createEmpty: false) |> group(columns: [\"entity_id\"]) |> yield(name: \"Sensor Value Trends\")",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "palette-classic"},
          "custom": {
            "drawStyle": "line",
            "lineInterpolation": "smooth",
            "fillOpacity": 20
          }
        }
      }
    },
    {
      "id": 3,
      "title": "Device Behavior Changes",
      "type": "table",
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\") |> range(start: -7d) |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/) |> filter(fn: (r) => r[\"domain\"] =~ /(light|switch|climate|cover)/) |> filter(fn: (r) => r[\"_field\"] == \"state\") |> aggregateWindow(every: 1h, fn: count, createEmpty: false) |> group(columns: [\"domain\", \"entity_id\"]) |> stddev() |> sort(columns: [\"_value\"], desc: true) |> limit(n: 25) |> yield(name: \"Behavior Variance\")",
          "refId": "A"
        }
      ]
    },
    {
      "id": 4,
      "title": "Predictive Failure Indicators",
      "type": "heatmap",
      "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8},
      "targets": [
        {
          "query": "from(bucket: \"ha_events\") |> range(start: -7d) |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/) |> filter(fn: (r) => r[\"domain\"] == \"sensor\") |> filter(fn: (r) => r[\"_field\"] == \"state\") |> filter(fn: (r) => r[\"state\"] =~ /^[0-9.]+$/) |> map(fn: (r) => ({r with _value: float(v: r.state)})) |> aggregateWindow(every: 6h, fn: mean, createEmpty: false) |> group(columns: [\"entity_id\"]) |> yield(name: \"Sensor Performance Patterns\")",
          "refId": "A"
        }
      ]
    }
  ]
}
